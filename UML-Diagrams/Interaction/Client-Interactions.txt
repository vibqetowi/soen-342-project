@startuml
actor User
participant System
participant "C:Client"
collections Clients

autonumber

User -> System : registerClient(email : String, password : String, age : Integer)
System -> System : hash(password)

alt (age < 18)
    System -> User : request guardian_id
    User -> System : input(guardian_id)
    System -> Clients : find(guardian_id)
    Clients --> System : return G: Guardian
    System -> "C:Client" ** : create(client_id: Integer, email, hashed_password, age, G)
    "C:Client" --> System : Confirm
    System -> Clients : add(C)
    Clients --> System : Confirm
else (age >= 18)
    System -> "C:Client" ** : create(client_id: Integer, email, hashed_password, age)
    "C:Client" --> System : Confirm
    System -> Clients : add(C)
    Clients --> System : Confirm
end

System --> User : Confirm

@enduml

'__________________________________________

@startuml
actor User
participant System
participant "C:Client"
collections Clients

autonumber

User -> System : login(email : String, password : String)
System -> Clients : find(email)
Clients --> System : return C:Client

System -> "C:Client" : getHashedPassword()
"C:Client" --> System : return stored_hashed_password
System -> System : hash(password)

alt (stored_hashed_password == hashed_password)
    System --> User : Confirm login
else
    System --> User : Error (invalid credentials)
end
@enduml

'__________________________________________

@startuml
actor User
participant System
collections PublicOfferings
note over of PublicOfferings : SuitablePO is a filtered subset of PublicOfferings
collections SuitablePO
participant "PO:PublicOffering"
collections Clients
participant "C:Client"
participant "C.Schedule:Schedule"

autonumber

User -> System : makeBooking(search_query)
System -> PublicOfferings : find(search_query)
PublicOfferings --> System : return SuitablePO

alt (SuitablePO not NULL)
    System --> User : prompt to select Offering
    User -> System : select(offering_id)
    System -> SuitablePO : find(offering_id)
    SuitablePO --> System : return PO:PublicOffering
    System -> "PO:PublicOffering" : getCapacity()
    "PO:PublicOffering" --> System : return capacity
    
    alt (capacity > 0)
        System -> "PO:PublicOffering" : getTimeslots()
        "PO:PublicOffering" --> System : return PO.Timeslots
        System -> Clients : find(client_id)
        Clients --> System : return "C:Client"
        System -> "C:Client" : getSchedule()
        "C:Client" --> System : return "C.Schedule"
        System -> "C.Schedule:Schedule" : getTimeSlots()
        "C.Schedule:Schedule" --> System : return "C.Schedule.Timeslots"
        "C.Schedule:Schedule" --> "C:Client" : return "C.Schedule.Timeslots"
        "C:Client" --> System : return "C.Schedule.Timeslots"

        System -> System : checkOverlap(PO.TimeSlots, C.Schedule.Timeslots)

        alt (overlap between PO.TimeSlots and C.Schedule.Timeslots)
            System --> User : error "schedule conflict"
        else
            System -> "C.Schedule:Schedule" : add PO
            "C.Schedule:Schedule" --> "C:Client" : Confirm
            "C:Client" --> System : Confirm
            System -> "PO:PublicOffering" : adjustCapacity()
            "PO:PublicOffering" --> System : Confirm
            System --> User : Confirm
        end
    else
        System --> User : error "all offerings full"
    end
else
    System --> User : error "no offering found"
end

@enduml

'__________________________________________

@startuml
actor User
participant System
collections Clients
participant "C:Client"
participant "C.Schedule:Schedule"
participant "PO:PublicOffering"

autonumber

User -> System : cancelBooking(offering_id)
System -> Clients : find(client_id)
Clients --> System : return C:Client
System -> "C:Client" : getSchedule()
"C:Client" --> System : return C.Schedule
System -> "C.Schedule:Schedule" : find(offering_id)
"C.Schedule:Schedule" --> System : return PO:PublicOffering
System -> "C.Schedule:Schedule" : remove(PO)
"C.Schedule:Schedule" --> "C:Client" : Confirm
System -> "PO:PublicOffering" : adjustCapacity()
"PO:PublicOffering" --> System : Confirm
"C:Client" --> System : Confirm
System --> User : Confirm 

@enduml