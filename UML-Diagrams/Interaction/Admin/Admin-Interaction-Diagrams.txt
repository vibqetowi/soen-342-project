@startuml
actor Admin
participant System
collections OfferingCatalog
participant "O:Offering" 
collections Offerings

title Create Offering

autonumber

Admin -> System : createOffering(offering_id : Integer, lesson_type : String, mode : String)
System -> OfferingCatalog: newOffering(*args)
OfferingCatalog -> "O:Offering" **: create(*args)
"O:Offering" --> OfferingCatalog: Confirm
OfferingCatalog -> Offerings: add(O)
Offerings --> OfferingCatalog: Confirm
OfferingCatalog --> System : Confirm 
System --> Admin : Confirm

@enduml
__________________________________________
@startuml
actor Admin
participant System
collections UserCatalog
participant "U:User"

note over of UserCatalog
I write User as generic datatype
there's no meaningful difference 
between client and instructor here
end note

title delete User

autonumber

Admin -> System : deleteUser(id)
System -> UserCatalog : find(id)
UserCatalog --> System : return U:User
System -> UserCatalog : confirmDelete(U)
UserCatalog -> "U:User" !! : delete
UserCatalog --> System : Confirm
System --> Admin : Confirm

@enduml
__________________________________________

@startuml
actor Admin
participant System
collections UserCatalog
participant "U:User"

note over of UserCatalog
I write User as generic datatype
there's no meaningful difference 
between client and instructor here
end note

note over of System
I write *args to suggest any possible edits
end note

title edit User

autonumber

Admin -> System : editUser(id,*args)
System -> UserCatalog : find(id)
UserCatalog --> System : return U:User
System -> UserCatalog : confirmEdit(U)
UserCatalog -> "U:User": editRecord(*args)
UserCatalog --> System : Confirm
System --> Admin : Confirm

@enduml
