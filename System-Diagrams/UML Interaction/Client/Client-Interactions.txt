@startuml
actor Client
participant UI
participant "System\n<<singleton>>" as System 
participant "AccessControl\n<<singleton>>" as AccessControl
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "C:Client" as User
participant "AL:AuditLog" as AuditLog
collections Clients
collections AuditLogs

title Register Client

note right of UI
Using *args for brevity
end note

autonumber

Client -> UI: handleUserInput(email, password, *args)
UI -> System: register(*args)

System -> AccessControl: validateAccess(null, UserCatalog, WRITE)
AccessControl --> System: confirm

System -> System: hash(password)
System -> System: generate_id()

System -> UserCatalog: addUser(id, email, hashed_password, *args)
UserCatalog -> User ** : create(*args)

User --> UserCatalog: confirm
UserCatalog -> Clients: add(C)
Clients --> UserCatalog: confirm

AccessControl -> AuditLog **: create(timestamp, *args)
AuditLog --> AccessControl: confirm
AccessControl -> AuditLogs: add(AL)
AuditLogs --> AccessControl: confirm

UserCatalog --> System: confirm
System --> UI: confirm
UI --> Client: confirm

@enduml
'__________________________________________

@startuml
actor Client
participant UI
participant "System\n<<singleton>>" as System
participant "AccessControl\n<<singleton>>" as AccessControl
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "C:Client" as User
participant "AL:AuditLog" as AuditLog
collections AuditLogs

title Client Login

autonumber

Client -> UI: handleUserInput(email, password)
UI -> System: login(email, password)

System -> AccessControl: validateAccess(null, UserCatalog, READ)
AccessControl --> System: confirm

System -> UserCatalog: getUser(email)
UserCatalog -> UserCatalog: find(email)
UserCatalog --> System: return C:Client

System -> User: getHashedPassword()
User --> System: return stored_hashed_password
System -> System: hash(password)

alt#LightBlue #LightBlue stored_hashed_password == hashed_password
    System -> AccessControl: notifySuccess()
    AccessControl -> AuditLog **: create(*args)
    AuditLog --> AccessControl: confirm
    AccessControl -> AuditLogs: add(AL)
    AuditLogs --> AccessControl: confirm
    AccessControl --> System: confirm
    System --> UI: confirm
    UI --> Client: confirm
else #LightPink else
    System -> AccessControl: notifyError()
    AccessControl -> AuditLog **: create(*args)
    AuditLog --> AccessControl: confirm
    AccessControl -> AuditLogs: add(AL)
    AuditLogs --> AccessControl: confirm
    AccessControl --> System: confirm
    System --> UI: error
    UI --> Client: error
end
@enduml
'__________________________________________

@startuml
title Client Make Booking

actor Client
participant UI
participant "System\n<<singleton>>" as System
participant "AccessControl\n<<singleton>>" as AccessControl
participant "OfferingCatalog\n<<singleton>>" as OfferingCatalog
participant "ScheduleCatalog\n<<singleton>>" as ScheduleCatalog
participant "BookingCatalog\n<<singleton>>" as BookingCatalog
participant "PO:PublicOffering" as PublicOffering
participant "S:Schedule" as Schedule
participant "B:Booking" as Booking
participant "AL:AuditLog" as AuditLog
collections BookingLogs
collections AuditLogs

autonumber

Client -> UI: handleUserInput(search_query)
UI -> System: makeBooking(search_query)

System -> AccessControl: validateAccess(client, OfferingCatalog, READ)
AccessControl --> System: confirm

System -> OfferingCatalog: findOfferings(search_query)
OfferingCatalog --> System: return List<PublicOfferings>

alt#LightBlue #LightBlue List not empty
    loop #DFF5E4 while Client selects to continue
        System --> UI: return offerings
        UI --> Client: displayOfferings()
        Client -> UI: selectOffering(offering_id)
        UI -> System: selectOffering(offering_id)
        
        System -> OfferingCatalog: getOffering(offering_id)
        OfferingCatalog --> System: return PO:PublicOffering
        System -> PublicOffering: getCapacity()
        PublicOffering --> System: return capacity

        alt#mistyrose #mistyrose capacity > 0
            System -> PublicOffering: getTimeslots()
            PublicOffering --> System: return timeslots
            System -> ScheduleCatalog: getClientSchedule(client_id)
            ScheduleCatalog --> System: return S:Schedule
            System -> Schedule: getTimeSlots()
            Schedule --> System: return timeSlots
            System -> System: checkOverlap(timeslots, timeSlots)

            alt#LightYellow #LightYellow schedule conflict exists
                System --> UI: error
                UI --> Client: error "schedule conflict"
            else no conflict
                System -> AccessControl: validateAccess(client, BookingCatalog, WRITE)
                AccessControl --> System: confirm
                
                System -> BookingCatalog: createBooking(client_id, offering_id)
                BookingCatalog -> Booking **: create(client_id, offering_id)
                Booking --> BookingCatalog: confirm
                BookingCatalog -> BookingLogs: add(B)
                BookingLogs --> BookingCatalog: confirm
                
                System -> Schedule: addBooking(B)
                Schedule --> System: confirm
                
                AccessControl -> AuditLog **: create(*args)
                AuditLog --> AccessControl: confirm
                AccessControl -> AuditLogs: add(AL)
                AuditLogs --> AccessControl: confirm
                
                System --> UI: confirm
                UI --> Client: displayBookingConfirmation()
            end
        else
            System --> UI: error
            UI --> Client: error "offering full"
        end
        System --> UI: prompt
        UI --> Client: promptContinue()
    end
else
    System --> UI: error
    UI --> Client: error "no offerings found"
end

@enduml
'__________________________________________

@startuml
title Cancel Booking

actor Client
participant UI
participant "System\n<<singleton>>" as System
participant "AccessControl\n<<singleton>>" as AccessControl
participant "BookingCatalog\n<<singleton>>" as BookingCatalog
participant "ScheduleCatalog\n<<singleton>>" as ScheduleCatalog
participant "B:Booking" as Booking
participant "S:Schedule" as Schedule
participant "AL:AuditLog" as AuditLog
collections AuditLogs

autonumber

note right of System
Abstracted: Updating client schedule
end note

Client -> UI: handleUserInput(booking_id)
UI -> System: cancelBooking(booking_id)

System -> AccessControl: validateAccess(client, BookingCatalog, WRITE)
AccessControl --> System: confirm

System -> BookingCatalog: getBooking(booking_id)
BookingCatalog --> System: return B:Booking

System -> ScheduleCatalog: getClientSchedule(client_id)
ScheduleCatalog --> System: return S:Schedule

System -> Schedule: update()
Schedule --> System: confirm

System -> BookingCatalog: deleteBooking(booking_id)
BookingCatalog -> Booking !!: delete
BookingCatalog --> System: confirm

AccessControl -> AuditLog **: create(*args)
AuditLog --> AccessControl: confirm
AccessControl -> AuditLogs: add(AL)
AuditLogs --> AccessControl: confirm

System --> UI: confirm
UI --> Client: displayCancellationConfirmation()

@enduml