@startuml
actor Client
participant System
collections UserCatalog
participant "C:Client"
collections Clients

title Register Client

note over of System
I use *args for other account details
space constraints, thank you
end note

autonumber

Client -> System : registerClient(email, password, *args)
System -> System : hash(password)
System -> System: generate_id()
System -> UserCatalog: newClient(id,email,hashed_password, *args)
UserCatalog  -> "C:Client" **: create(*args)
"C:Client" --> UserCatalog : Confirm
UserCatalog -> Clients : add(C)
Clients --> UserCatalog: Confirm
UserCatalog --> System: Confirm
System --> Client: Confirm

@enduml
'__________________________________________

@startuml
actor Client
participant System
collections UserCatalog
participant "C:Client"

title Client Login

autonumber

Client -> System : login(email : String, password : String)
System -> UserCatalog : find(email)
UserCatalog --> System : return C:Client

System -> "C:Client" : getHashedPassword()
"C:Client" --> System : return stored_hashed_password
System -> System : hash(password)

alt#LightBlue #LightBlue (stored_hashed_password == hashed_password)
    System --> Client : Confirm login
else #LightCoral
    System --> Client : Error (invalid credentials)
end
@enduml

'__________________________________________
@startuml
actor Client
participant System
collections OfferingCatalog
participant "PO:PublicOffering"
collections ScheduleCatalog
participant "S:Schedule"
collections BookingCatalog
participant "B:Booking"

autonumber

title Client Make Booking

Client -> System : makeBooking(search_query)
System -> OfferingCatalog : find(search_query)
OfferingCatalog --> System : return List<PublicOfferings>

alt#LightBlue #LightBlue (List not empty)
    loop #LightGreen do while Client selects to continue
        System --> Client : prompt to select Offering
        Client -> System : select(offering_id)
        System -> OfferingCatalog : find(offering_id)
        OfferingCatalog --> System : return PO:PublicOffering
        System -> "PO:PublicOffering" : getCapacity()
        "PO:PublicOffering" --> System : return PO.capacity

        alt#LightCoral #LightCoral (PO.capacity > 0)
            System -> "PO:PublicOffering" : getTimeslots()
            "PO:PublicOffering" --> System : return PO.Timeslots
            System -> ScheduleCatalog : find(client_id)
            ScheduleCatalog --> System : return "S:Schedule"
            System -> "S:Schedule" : getTimeSlots()
            "S:Schedule" --> System : return "S.TimeSlots"
            System -> System : checkOverlap(PO.TimeSlots, S.TimeSlots)

            alt#LightYellow #LightYellow (overlap between PO.TimeSlots and S.TimeSlots)
                System --> Client : error "schedule conflict"
            else No Overlap
                System -> BookingCatalog : createBooking(PO, S)
                BookingCatalog -> "B:Booking" **: create()
                "B:Booking" --> BookingCatalog: Confirm
                BookingCatalog --> System : Confirm
                System --> "S:Schedule" : add(PO)
                "S:Schedule" --> System : Confirm
            end
        else
            System --> Client : error "all offerings full"
        end
        System --> Client: Prompt to continue or exit
    end
else
    System --> Client : error "no offering found"
end
System -> Client: Confirm
@enduml
'__________________________________________

@startuml
actor Client
participant System
collections OfferingCatalog
participant "O:Offering"
collections UserCatalog
participant "C:Client"

autonumber

Client -> System : cancelBooking(offering_id)

System -> OfferingCatalog : find(offering_id)
OfferingCatalog --> System : return O:Offering

System -> "O:Offering" : getClientList()
"O:Offering" --> System : return O.clientList

System -> "O:Offering" : O.clientList.remove(self.client_id)
"O:Offering" --> System : Confirm removal

loop #LightGreen For each client in O.clientList
    System -> UserCatalog : find(client_id)
    UserCatalog --> System : return "C:Client"
    System -> "C:Client" : notifyCancellation()
    "C:Client" --> System : Confirm
end

System -> "O:Offering" : adjustCapacity()
"O:Offering" --> System : Confirm

System -> UserCatalog : find(client_id)
UserCatalog --> System : return "C:Client"
System -> "C:Client" : C.Schedule.remove(O)
"C:Client" --> System : Confirm

System --> Client : Confirm 

@enduml