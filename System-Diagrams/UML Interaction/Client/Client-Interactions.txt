@startuml
actor Client
participant UI
participant "System\n<<singleton>>" as System 
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "C:Client" as User
participant "G:Client" as Guardian
collections Clients

title Register Client

note right of UI
Registration completes regardless of age but Booking is limited
Using *args for brevity
end note

autonumber

Client -> UI: handleUserInput(email, password, age, *args)
UI -> System: register(*args)

System -> System: hash(password)
System -> System: generate_id()

alt#mistyrose #mistyrose age < 18
    System --> UI: requestGuardianEmail()
    UI --> Client: promptGuardianEmail()
    Client -> UI: handleUserInput(guardian_email)
    UI -> System: submitGuardianEmail(guardian_email)
    
    System -> UserCatalog: getInstance()
    System -> UserCatalog: findGuardian(guardian_email)
    UserCatalog -> UserCatalog: find(guardian_email)
    
    alt#lightblue #lightblue guardian found
        UserCatalog --> System: return G:Client
        System -> Guardian: getAge(), getID()
        Guardian --> System: return(age,id)
        System -> System: checkAge()
        alt#lightyellow #lightyellow guardian_age >= 18
            System --> System: continue
        else guardian is minor
            System --> UI: error "Guardian must be 18+"
            UI --> Client: requestNewGuardianEmail()
        end
        
    else guardian not found
        System -> System: sendGuardianInvite(guardian_email)
    end
    
else continue
end

System -> UserCatalog: getInstance()
System -> UserCatalog: addUser(*args)
System -> System: generate_id()
UserCatalog -> User **: create(*args, id)
User --> UserCatalog: confirm
UserCatalog -> Clients: add(C)
Clients --> UserCatalog: confirm

UserCatalog --> System: confirm
System --> UI: confirm
UI --> Client: confirm

@enduml
_________________________________

@startuml
actor Client
participant UI
participant "System\n<<singleton>>" as System
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "C:Client" as User

title Client Login

autonumber

Client -> UI: handleUserInput(email, password)
UI -> System: login(email, password)

System -> UserCatalog: getInstance()
System -> UserCatalog: getUser(email)
UserCatalog -> UserCatalog: find(email)
UserCatalog --> System: return C:Client

System -> User: getHashedPassword()
User --> System: return stored_hashed_password
System -> System: hash(password)

alt#LightBlue #LightBlue stored_hashed_password == hashed_password
    System --> UI: confirm
    UI --> Client: confirm
else #lightpink
    System --> UI: error
    UI --> Client: error
end
@enduml
_________________________________

@startuml
title Client Make Booking

actor Client
participant UI
participant "System\n<<singleton>>" as System
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "OfferingCatalog\n<<singleton>>" as OfferingCatalog
participant "ScheduleCatalog\n<<singleton>>" as ScheduleCatalog
participant "BookingCatalog\n<<singleton>>" as BookingCatalog
participant "PO:PublicOffering" as PublicOffering
participant "S:Schedule" as Schedule
participant "B:Booking" as Booking
collections Bookings

note right of System
Abstracted methods:
- Search query processing
- Notification sending
- Capacity calculations

Schedule validation defined elsewhere

Clients can make bookings for themselves or their child if applicable
children are not allowed to make their own bookings
end note

autonumber

Client -> UI: handleUserInput(search_query)
UI -> System: makeBooking(search_query)

System -> UserCatalog: getInstance()
System -> UserCatalog: getUser(client_id)
UserCatalog -> UserCatalog: find(client_id)
UserCatalog --> System: return C:Client
note right: omitting the get age flow

alt#e6e6fa #e6e6fa age < 18
    System --> UI: error
    UI --> Client: error "Minors cannot make bookings"
else
    System --> UI: promptBookingType()
    UI --> Client: displayBookingOptions()
    Client -> UI: selectBookingType(for_self_or_child)
    UI -> System: handleBookingType(type)

    alt#lightblue #lightblue type == "for_child"
        System -> UserCatalog: getInstance()
        System -> UserCatalog: getChildren(client_id)
        UserCatalog -> UserCatalog: find(guardian_id)
        UserCatalog --> System: return List<Client>
        System --> UI: return children_list
        UI --> Client: displayChildrenSelection()
        Client -> UI: selectChild(child_id)
        UI -> System: setBookedForClientId(child_id)
    else
        System -> System: setBookedForClientId(client_id)
    end

    System -> OfferingCatalog: getInstance()
    System -> OfferingCatalog: findOfferings(search_query)
    OfferingCatalog --> System: return List<PublicOfferings>

    alt#palegreen #palegreen List not empty
        loop#lightyellow #lightyellow while Client selects to continue
            System --> UI: return offerings
            UI --> Client: displayOfferings()
            Client -> UI: selectOffering(offering_id)
            UI -> System: selectOffering(offering_id)
            
            System -> OfferingCatalog: getInstance()
            System -> OfferingCatalog: getOffering(offering_id)
            OfferingCatalog --> System: return PO:PublicOffering
            System -> PublicOffering: getCapacity()
            PublicOffering --> System: return capacity

            alt#lightblue #lightblue capacity > 0
                System -> PublicOffering: getStartAndEndTime()
                PublicOffering --> System: return (start_time, end_time)
                
                ' New validation flow
                System -> System: validateTimeSlots(  start_time,  end_time,  client.schedule_id)

                alt#mistyrose #mistyrose validation failed
                    System --> UI: error "Timeslot unavailable"
                    UI --> Client: error "schedule conflict"
                else
                    System -> BookingCatalog: getInstance()
                    System -> System: generate_id()
                    System -> BookingCatalog: createBooking(client_id, booked_for_client_id, offering_id, id)
                    BookingCatalog -> Booking **: create(client_id, booked_for_client_id, offering_id, id)
                    Booking --> BookingCatalog: confirm
                    BookingCatalog -> Bookings: add(B)
                    Bookings --> BookingCatalog: confirm
                    
                    ' New reservation flow
                    System -> System: reserveTimeSlots(  validTimeSlotIds,  public_offering_id)
                    
                    System --> UI: confirm
                    UI --> Client: displayBookingConfirmation()
                end
            else
                System --> UI: error
                UI --> Client: error "offering full"
            end
            System --> UI: prompt
            UI --> Client: promptContinue()
        end
    else
        System --> UI: error
        UI --> Client: error "no offerings found"
    end
end

@enduml
_________________________________

@startuml
title Cancel Booking
actor Client
participant UI
participant "System\n<<singleton>>" as System
participant "BookingCatalog\n<<singleton>>" as BookingCatalog
participant "ScheduleCatalog\n<<singleton>>" as ScheduleCatalog
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "B:Booking" as Booking
participant "S:Schedule" as Schedule

note right of System
Abstracted methods:
- Cancellation policy checks
- Refund processing
- Notification sending
- Schedule cleanup
- Booking state validation
- Cancellation window validation
end note

autonumber
Client -> UI: requestCancelBooking()
UI -> System: getClientBookings(client_id)
System -> BookingCatalog: getInstance()
System -> BookingCatalog: getBookingsByClientId(client_id)
BookingCatalog -> BookingCatalog: find(booked_by_client_id = client_id)
BookingCatalog --> System: return List<Bookings>
System --> UI: return List<Bookings>
UI --> Client: displayBookings(List<Bookings>)

loop#LightBlue #LightBlue foreach selected booking
    Client -> UI: selectBookingToCancel(booking_id)
    UI -> System: cancelBooking(booking_id)
    System -> BookingCatalog: getInstance()
    System -> BookingCatalog: getBooking(booking_id)
    BookingCatalog -> BookingCatalog: find(booking_id)
    BookingCatalog --> System: return B:Booking

    System -> UserCatalog: getInstance()
    System -> UserCatalog: getUser(booked_for_client_id)
    UserCatalog -> UserCatalog: find(booked_for_client_id)
    UserCatalog --> System: return bookedForUser:Client
    System -> System: notifyBookedForUser(bookedForUser)
    
    System -> ScheduleCatalog: getInstance()
    System -> ScheduleCatalog: getClientSchedule(booked_for_client_id)
    ScheduleCatalog --> System: return S:Schedule
    System -> Schedule: update()
    Schedule --> System: confirm
    System -> BookingCatalog: deleteBooking(booking_id)
    BookingCatalog -> Booking !!: delete
    BookingCatalog --> System: confirm
    System --> UI: confirm
    UI --> Client: displayCancellationConfirmation()
end
@enduml
_________________________________