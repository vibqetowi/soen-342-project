@startuml
actor Instructor
participant UI
participant "System\n<<singleton>>" as System 
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "I:Instructor" as User
collections Instructors

title Register Instructor

note right of UI
Using *args for brevity
end note

autonumber

Instructor -> UI: handleUserInput(email, password, *args)
UI -> System: register(*args)

System -> System: hash(password)
System -> System: generate_id()

System -> UserCatalog: getInstance()
System -> UserCatalog: addUser(id, email, hashed_password, *args)
UserCatalog -> User **: create(*args, id)

User --> UserCatalog: confirm
UserCatalog -> Instructors: add(I)
Instructors --> UserCatalog: confirm

UserCatalog --> System: confirm
System --> UI: confirm
UI --> Instructor: confirm

@enduml
_____________________

@startuml
actor Instructor
participant UI
participant "System\n<<singleton>>" as System
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "I:Instructor" as User

title Instructor Login

autonumber

Instructor -> UI: handleUserInput(email, password)
UI -> System: login(email, password)

System -> UserCatalog: getInstance()
System -> UserCatalog: getUser(email)
UserCatalog -> UserCatalog: find(email)
UserCatalog --> System: return I:Instructor

System -> User: getHashedPassword()
User --> System: return stored_hashed_password
System -> System: hash(password)

alt#LightBlue #LightBlue stored_hashed_password == hashed_password
    System --> UI: confirm
    UI --> Instructor: confirm
else #LightPink else
    System --> UI: error
    UI --> Instructor: error
end
@enduml
_____________________

@startuml
title Update Location Availability

actor Instructor
participant UI
participant "System\n<<singleton>>" as System
participant "LocationCatalog\n<<singleton>>" as LocationCatalog
participant "UserCatalog\n<<singleton>>" as UserCatalog
participant "IBA:InstructorBranchAvailability" as IBA
collections InstructorBranchAvailabilities

note right of UI
Using *args for brevity
end note

autonumber

Instructor -> UI: handleUserInput(updateAvailability)
UI -> System: getCities()

System -> LocationCatalog: getInstance()
System -> LocationCatalog: getCities()
LocationCatalog --> System: return cities

System --> UI: return cities
UI --> Instructor: displayCities()

Instructor -> UI: selectCities(city_ids[])
UI -> System: updateAvailability(city_ids[])

System -> LocationCatalog: getInstance()
System -> LocationCatalog: getBranchesByCities(city_ids[])
LocationCatalog --> System: return branches[]

loop#SkyBlue #SkyBlue for each branch in branches[]
    System -> System: generate_id()
    System -> UserCatalog: getInstance()
    System -> UserCatalog: createInstructorBranchAvailability(instructor_id, branch_id, id)
    UserCatalog -> IBA **: create(instructor_id, branch_id, id)
    IBA --> UserCatalog: confirm
    UserCatalog -> InstructorBranchAvailabilities: add(IBA)
    InstructorBranchAvailabilities --> UserCatalog: confirm
end

System --> UI: confirm
UI --> Instructor: confirm

@enduml
_____________________

@startuml
title Accept Offerings - Create Public Offering
actor Instructor
participant UI
participant "System\n<<singleton>>" as System
collections "SO:SuitableOfferings<Offerings>" as SO
participant "LocationCatalog\n<<singleton>>" as LocationCatalog
participant "OfferingCatalog\n<<singleton>>" as OfferingCatalog
participant "IBA:InstructorBranchAvailability" as IBA
participant "OIB:OfferedInBranch" as OIB
participant "O:Offering" as Offering
participant "PO:PublicOffering" as PublicOffering
participant "ScheduleCatalog\n<<singleton>>" as ScheduleCatalog
collections PublicOfferings

note right of System
Timeslot validation and reservation process are defined elsewhere
end note

autonumber
Instructor -> UI: handleUserInput(*args)
UI -> System: findSuitableOfferings(instructor_id, specialization)
System -> System: generate_id()
System -> SO **: create(id)
SO --> System: confirm
System -> LocationCatalog: getInstance()
System -> LocationCatalog: findSuitableBranches(instructor_id)
LocationCatalog -> IBA: findSuitableBranches(instructor_id)
IBA --> LocationCatalog: return List<branch_id>
LocationCatalog --> System: return List<branch_id>
System -> OfferingCatalog: getInstance()
System -> OfferingCatalog: findSuitableOfferings(List<branch_id>, specialization, SO)
OfferingCatalog -> OIB: findSuitableOfferings(List<branch_id>, specialization, SO)
OIB --> OfferingCatalog: return SO
OfferingCatalog --> System: return SO

alt#lightyellow #lightyellow SO not empty
    loop#lightblue #lightblue while Instructor selects to continue
        System --> UI: return SO
        UI --> Instructor: displayOfferings()
        Instructor -> UI: selectOffering(offering_id)
        UI -> System: selectOffering(offering_id)
        
        System -> OfferingCatalog: getOffering(offering_id)
        OfferingCatalog -> Offering: getStartAndEndTime()
        Offering --> System: return (start_time, end_time)
        
        ' New validation flow
        System -> System: validateTimeSlots(  start_time,  end_time,  instructor.schedule_id)
        
        alt#mistyrose #mistyrose validation failed
            System --> UI: error "Timeslot unavailable"
            UI --> Instructor: error
        else #DFF5E4 validation successful
            System -> System: generate_id()
            System -> OfferingCatalog: createPublicOffering(instructor_id, offering_id, id)
            OfferingCatalog -> PublicOffering **: create(instructor_id, offering_id, id)
            PublicOffering --> OfferingCatalog: confirm
            OfferingCatalog -> PublicOfferings: add(PO)
            PublicOfferings --> OfferingCatalog: confirm
            
            ' New reservation flow
            System -> System: reserveTimeSlots(  validTimeSlotIds,  public_offering_id)
            
            System --> UI: confirm
            UI --> Instructor: prompt
        end
    end
else SO empty
    System --> UI: error
    UI --> Instructor: error
end
@enduml
_____________________

@startuml
title Cancel Class (PublicOffering)

actor Instructor
participant UI
participant "System\n<<singleton>>" as System
participant "OfferingCatalog\n<<singleton>>" as OfferingCatalog
participant "BookingCatalog\n<<singleton>>" as BookingCatalog
participant "PO:PublicOffering" as PublicOffering
participant "B:Booking" as Booking
participant "ScheduleCatalog\n<<singleton>>" as ScheduleCatalog

note right of System
Abstracted: getting list of PO associated with instructor
end note

autonumber

Instructor -> UI: handleUserInput(*args)
UI -> System: findInstructorClasses(instructor_id)

System -> OfferingCatalog: getInstance()
System -> OfferingCatalog: findClassesByInstructor(instructor_id)
OfferingCatalog --> System: return List<PO>

System --> UI: return List<PO>
UI --> Instructor: displayClasses()

alt#lightyellow #lightyellow List<PO> not empty
    loop#lightblue #lightblue while Instructor selects to continue
        Instructor -> UI: selectClassToCancel(offering_id)
        UI -> System: cancelOffering(offering_id)
        
        System -> OfferingCatalog: getInstance()
        System -> OfferingCatalog: getOffering(offering_id)
        OfferingCatalog --> System: return PO:PublicOffering
        
        System -> PublicOffering: getBookings()
        PublicOffering --> System: return List<Booking>
        
        loop#LightCyan #LightCyan for each booking in List<Booking>
            System -> BookingCatalog: getInstance()
            System -> BookingCatalog: cancelBooking(booking.id)
            BookingCatalog -> Booking !!: delete
            BookingCatalog --> System: confirm
        end
        
        System -> OfferingCatalog: getInstance()
        System -> OfferingCatalog: deletePublicOffering(offering_id)
        OfferingCatalog -> PublicOffering !!: delete
        OfferingCatalog --> System: confirm
        
        System -> ScheduleCatalog: getInstance()
        System -> ScheduleCatalog: updateSchedule(instructor.schedule_id)
        ScheduleCatalog --> System: confirm
        
        System --> UI: confirm
        UI --> Instructor: prompt
    end
else List<PO> empty
    System --> UI: error
    UI --> Instructor: error
end

@enduml
_____________________