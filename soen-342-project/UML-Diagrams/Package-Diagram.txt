@startuml
title UML Package Diagram
package "Location" #pink {
    class LocationCatalog <<singleton>> {
        - {static} _instance : LocationCatalog
        - _initialized : Boolean
        - _provinces : Dict<Integer, Province>
        - _provinces_by_name : Dict<String, Province>
        - _cities : Dict<Integer, City>
        - _cities_by_name : Dict<String, City>
        - _branches : Dict<Integer, Branch>
        - _branches_by_name : Dict<String, Branch>
        - __new__(cls, *args, **kwargs) : LocationCatalog
        - __init__()
        + create_province(name : String) : Province
        + get_province(province_id : Integer) : Province
        + get_province_by_name(name : String) : Province
        + create_city(province_id : Integer, name : String) : City
        + get_city(city_id : Integer) : City
        + get_city_by_name(name : String) : City
        + create_branch(city_id : Integer, name : String, schedule_catalog : ScheduleCatalog) : Branch
        + get_branch(branch_id : Integer) : Branch
        + get_branch_by_name(name : String) : Branch
    }
    
    class _Province {
        - province_id : Integer <<PK>>
        - name : String
        - _cities : Dict<Integer, City>
        - _cities_by_name : Dict<String, City>
        - __init__(province_id : Integer, name : String)
        + create_city(name : String) : City
        + get_city(city_id : Integer) : City
        + get_city_by_name(name : String) : City
    }

    class _City {
        - city_id : Integer <<PK>>
        - name : String
        - province : Province
        - _branches : Dict<Integer, Branch>
        - _branches_by_name : Dict<String, Branch>
        - __init__(city_id : Integer, name : String, province : Province)
        + create_branch(name : String, schedule_catalog : ScheduleCatalog) : Branch
        + get_branch(branch_id : Integer) : Branch
        + get_branch_by_name(name : String) : Branch
    }

    class _Branch {
        - branch_id : Integer <<PK>>
        - name : String
        - city : City
        - schedule : Schedule
        - __init__(branch_id : Integer, name : String, city : City, schedule_catalog : ScheduleCatalog)
    }

    LocationCatalog o--[#red,bold] "_Province"
    _Province o--[#red,bold] "_City"
    _City o--[#red,bold] "_Branch"
}

package "Scheduling" #lightblue {
    class ScheduleCatalog <<singleton>> {
        - {static} _instance : ScheduleCatalog
        - _initialized : Boolean
        - _schedules : Dict<Integer, Schedule>
        - __new__(cls, *args, **kwargs) : ScheduleCatalog
        - __init__()
        + create_schedule(owner_id : Integer) : Schedule
        + get_schedule(schedule_id : Integer) : Schedule
    }

    class Schedule {
        - schedule_id : Integer <<PK>>
        - schedule_owner_id : Integer <<FK>> 
        - time_slots : Dict<DateTime, TimeSlot>
        - __init__(schedule_id : Integer, owner_id : Integer)
        + add_time_slot(start_time : DateTime, end_time : DateTime) : TimeSlot
        + get_time_slot(start_time : DateTime) : TimeSlot
        + remove_time_slot(start_time : DateTime) : Boolean
    }

    class TimeSlot <<weak>> {
        + {schedule_id, start_time} <<PK>>
        - end_time : DateTime
        - isReserved : Boolean
        - __init__(schedule_id : Integer, start_time : DateTime, end_time : DateTime)
        + reserve() : Boolean
        + unreserve() : Boolean
    }

    ScheduleCatalog o--[#blue,bold] Schedule
    Schedule "1" *--[#blue,bold] "0..*" TimeSlot
}

package "Offerings" #lightgreen {
    class OfferingCatalog <<singleton>> {
        - {static} _instance : OfferingCatalog
        - _initialized : Boolean
        - _offerings : Dict<Integer, Offering>
        - __new__(cls, *args, **kwargs) : OfferingCatalog
        - __init__()
        + create_offering(instructor_id : Integer, lesson_type : String, mode : String, capacity : Integer) : Offering
        + get_offering(offering_id : Integer) : Offering
    }

    class Offering {
        - offering_id : Integer <<PK>>
        - instructor_id : Integer <<FK>>
        - lesson_type : String
        - mode : String
        - capacity : Integer
        - __init__(offering_id : Integer, instructor_id : Integer, lesson_type : String, mode : String, capacity : Integer)
    }

    class PublicOffering {
        - public_offering_id : Integer <<PK>>
        - offering_id : Integer <<FK>>
        - max_clients : Integer
        - __init__(public_offering_id : Integer, offering : Offering, max_clients : Integer)
        + add_booking(booking : Booking) : Boolean
        + remove_booking(booking : Booking) : Boolean
    }

    class InstructorAcceptsPublicOffering {
        - instructor_id : Integer <<FK>>
        - public_offering_id : Integer <<FK>>
        - index : Integer <<PK>>
        - accepted : Boolean
        - __init__(instructor : Instructor, public_offering : PublicOffering, index : Integer)
    }

    OfferingCatalog o--[#green,bold] Offering
    PublicOffering <|--[#green,bold] Offering : inheritance
}

package "Users" #lightyellow {
    class Instructor #brown;text:white {
        - instructor_id : Integer <<PK>>
        - schedule_id : Integer <<FK>>          
        - name : String
        - phone : String
        - specialization : String
        - email : String
        - password : String
        - __init__(instructor_id : Integer, name : String, email : String, password : String, phone : String, specialization : String)
        + update_schedule(schedule : Schedule) : Boolean
    }

    class Client #FFD580 {
        - client_id : Integer <<PK>>
        - guardian_id : Integer, NULL <<FK>>
        - schedule_id : Integer <<FK>>  
        - age : Integer
        - email : String
        - password : String
        - __init__(client_id : Integer, email : String, password : String, age : Integer, guardian_id : Integer = None)
        + update_schedule(schedule : Schedule) : Boolean
    }

    class Administrator #turquoise;text:black {
        - admin_id : Integer <<PK>>
        - email : String
        - password : String
        - __init__(admin_id : Integer, email : String, password : String)
    }

    class UserCatalog <<singleton>> {
        - {static} _instance : UserCatalog
        - _initialized : Boolean
        - _users : Dict<Integer, User>
        - _users_by_email : Dict<String, User>
        - __new__(cls, *args, **kwargs) : UserCatalog
        - __init__()
        + create_admin(email : String, password : String) : Administrator
        + create_instructor(name : String, email : String, password : String, phone : String, specialization : String) : Instructor
        + create_client(email : String, password : String, age : Integer, guardian_id : Integer = None) : Client
        + get_user(user_id : Integer) : User
        + get_user_by_email(email : String) : User
    }

    UserCatalog o--[#turquoise,bold] Administrator
    UserCatalog o--[#brown,bold] Instructor
    UserCatalog o--[#orange,bold] Client
}

package "Bookings" #E6E6FA {
    class BookingCatalog <<singleton>> {
        - {static} _instance : BookingCatalog
        - _initialized : Boolean
        - _bookings : Dict<Integer, Booking>
        - __new__(cls, *args, **kwargs) : BookingCatalog
        - __init__()
        + create_booking(client : Client, public_offering : PublicOffering, booked_for_clients : List<Client>) : Booking
        + get_booking(booking_id : Integer) : Booking
    }

    class Booking {
        - booking_id : Integer <<PK>>
        - booked_by_client_id : Integer <<FK>>
        - public_offering_id : Integer <<FK>>
        - booked_for_client_ids : List<Integer>
        - __init__(booking_id : Integer, booked_by : Client, public_offering : PublicOffering, booked_for : List<Client>)
    }
    
    BookingCatalog o--[#purple,bold] Booking
}

' Cross package relationships
Instructor "1" --[#brown,bold] "0..*" Offering : accepts >
Instructor "1..*" --[#brown,bold] "0..*" PublicOffering
Instructor "1" --[#brown,bold] "0..*" City: isAvailableIn >
Instructor "1" --[#brown,bold] "1" Schedule : has >
Client "1" -[#orange,bold]- "0..*" Booking : creates
Client "1" --[#orange,bold] "1" Schedule : has >
PublicOffering "1" o--[#purple,bold] "0..*" Booking 
PublicOffering "1" o-[#blue,bold]- "0..*" TimeSlot: reserves >
Schedule "1" o--[#green,bold] "0..*" PublicOffering
_Branch "1" --[#red,bold] "1" Schedule : has >

class System <<singleton>> {
    - {static} _instance : System
    - _initialized : Boolean
    - __new__(cls, *args, **kwargs) : System
    - __init__()
    + getInstance() : System
    + login(email : String, password : String) : User
    + register(user_type : String, user_data : Dict) : User
    + {static} generate_id() : Integer
}

' System Associations
System "1" -[#black,bold]-> "1" LocationCatalog : manages 
System "1" --[#black,bold]-> "1" ScheduleCatalog : manages 
System "1" --[#black,bold]-> "1" UserCatalog : manages 
System "1" --[#black,bold]-> "1" OfferingCatalog : manages 
System "1" --[#black,bold]-> "1" BookingCatalog : manages 
Administrator -[#turquoise,bold]-> System : uses 
Client -[#orange,bold]-> System : uses 
Instructor -[#brown,bold]-> System : uses 

'Association Classes
(Client, PublicOffering) .. Booking
(Instructor,PublicOffering) .. InstructorAcceptsPublicOffering

note right of TimeSlot
Weak entity with composite primary key:
{schedule_id, start_time}
Existence depends on Schedule
end note

note right of System
-All users: Read and write own account info
-Admin: Read and write all records
-Client:
    Read Public Offering
    Read and write own bookings 
    Limited read and write to User Catalog (guardian, own instructor)
-Instructor: 
    Read Offering
    Read and limited write to Public Offering
    Limited read and write to Booking Catalog (own lessons)
    Limited read to User Catalog (own lessons)
end note

note top of BookingCatalog
A Client can book a Public Offering 
for themselves or for others (for 
instance a Guardian booking for their child).

Also, Booking is the association class between
Client and PublicOffering.
end note

@enduml