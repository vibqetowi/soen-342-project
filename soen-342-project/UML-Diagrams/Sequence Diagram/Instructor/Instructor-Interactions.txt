@startuml
actor Instructor
participant System
collections UserCatalog
participant "I:Instructor"
collections Instructors

title Register Instructor

note over of System
I use *args for other account details
space constraints, thank you
end note

autonumber

Instructor -> System : registerInstructor(email, password, *args)
System -> System : hash(password)
System -> System: generate_id()
System -> UserCatalog: newInstructor(id,email,hashed_password, *args)
UserCatalog  -> "I:Instructor" **: create(*args)
"I:Instructor" --> UserCatalog : Confirm
UserCatalog -> Instructors : add(I)
Instructors --> UserCatalog: Confirm
UserCatalog --> System: Confirm
System --> Instructor: Confirm

@enduml

'__________________________________________

@startuml
actor Instructor
participant System
collections UserCatalog
participant "I:Instructor"

title Instructor Login

autonumber

Instructor -> System : login(email : String, password : String)
System -> UserCatalog : find(email)
UserCatalog --> System : return I:Instructor

System -> "I:Instructor" : getHashedPassword()
"I:Instructor" --> System : return stored_hashed_password
System -> System : hash(password)

alt#LightBlue #LightBlue (stored_hashed_password == hashed_password)
    System --> Instructor : Confirm login
else #mistyrose
    System --> Instructor : Error (invalid credentials)
end
@enduml

'__________________________________________

@startuml
actor Instructor
participant System
collections Offerings
collections SuitableO
participant "O:Offering"
collections Instructors
participant "I:Instructor"
collections PublicOfferings
participant "PO:PublicOffering"
note over of "I:Instructor": nowhere does it say the number of instructors teaching a certain class must be 1 and only 1

autonumber

Instructor -> System : acceptOffering(specialization, cities)
System -> Offerings : find(specialization, cities)
Offerings --> System : return SuitableO

alt#LightBlue #LightBlue (SuitableO not NULL)
    loop#DFF5E4 #DFF5E4 do while Instructor selects to continue (executes at least once)
        System --> Instructor : prompt to select Offering
        Instructor -> System : select(offering_id)
        System -> SuitableO : find(offering_id)
        SuitableO --> System : return O:Offering
        System -> "O:Offering" : getTimeslots()
        "O:Offering" --> System : return O.Timeslots
        System -> "Instructors" : find(instructor_id)
        Instructors --> System : return("I:Instructor")
        System -> "I:Instructor" : getTimeSlots()
        "I:Instructor" --> System : return I.Schedule.Timeslots

        System -> System : checkOverlap(O.TimeSlots, I.Schedule.Timeslots)

        alt#mistyrose #mistyrose (overlap between O.TimeSlots and I.Schedule.Timeslots)
            System --> Instructor : error "schedule conflict"
        else #mistyrose No Overlap
            System -> PublicOfferings : makePublicOffering(instructor_id, O)
            PublicOfferings --> "PO:PublicOffering" **: create(instructor_id, O)
            "PO:PublicOffering" --> PublicOfferings : Return "PO:PublicOffering"
            PublicOfferings --> System : return PO
            System -> PublicOfferings: add(PO)
            PublicOfferings --> System : Confirm
            System -> "I:Instructor" : I.Schedule.add(PO)
            "I:Instructor" --> System : Confirm
        end
        System --> Instructor: Prompt to continue or exit
    end
else #LightBlue Failure
    System --> Instructor : error "no suitable offering found"
end

@enduml
'__________________________________________

@startuml
actor Instructor
participant System
collections PublicOfferings
participant "PO:PublicOffering"
collections Instructors
participant "I:Instructor"
collections Clients
participant "C:Client"


autonumber

Instructor -> System : cancelBooking(offering_id)
System -> PublicOfferings : find(offering_id)
PublicOfferings --> System : return PO:PublicOffering


System -> "PO:PublicOffering" : getInstructorAndClientLists()
"PO:PublicOffering" --> System : return PO.instructorList, PO.clientList
System -> "PO:PublicOffering" : PO.instructorList.remove(self.instructor_id)
"PO:PublicOffering" --> System : Confirm
System -> System: Read PO.instructorList

alt#LightBlue #LightBlue (Instructor list not empty/Course will still happen)
    loop#DFF5E4 #DFF5E4 Notify each instructor
        System -> Instructors : find(instructor_id)
        Instructors --> System : return I:Instructor
        System -> "I:Instructor" : notify()
        "I:Instructor" --> System : Confirm
    end
    loop#DFF5E4 #DFF5E4 Notify each client
        System -> Clients : find(client_id)
        Clients --> System : return C:Client
        System -> "C:Client" : notify()
        "C:Client" --> System : Confirm
    end
else #mistyrose #mistyrose (No instructors left/Course is cancelled)
    loop#LightPink #LightPink Notify each client
        System -> Clients : find(client_id)
        Clients --> System : return C:Client
        System -> "C:Client" : notify()
        "C:Client" --> System : Confirm
    end
    System -> PublicOfferings : revertToNormalOffering(offering_id)
    PublicOfferings -> "PO:PublicOffering" !!: delete
    PublicOfferings --> System : Confirm
end


System --> Instructor : Confirm 

@enduml